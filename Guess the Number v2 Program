import random

# Variable for ending the game
endGame = False

# List to help rearrange the leaderboard
lbInfo = []

# Creating a file called SAleaderboard.txt
f = open("SAleaderboard.txt", "a")

# Setting up user class to keep the user's score and name
class User():

    def __init__ (self, name, score):

        self.name = name
        self.score = score

    def assignScore(self, score):

        self.score = score

    def addList(self):

        userInfo = (self.name, self.score)

        lbInfo.append(userInfo)
        
        #print(f"Username: (self.name)")
        #print(f"Score: (self.score)")



# Main gameplay
def game():

# Asking for username
    nameInput = input("\nEnter your username: ")
    user1 = User(nameInput, 0)

# Generating random number from 1-100
    number = random.randint(1, 100)

    user1.assignScore(1000)
    

    print("\nThe number is between 1 and 100.")

# Loops until the user finds the correct number
    while True:

# Dealing with invalid inputs
        while True:
            guess_input = input("\nEnter a guess: ")

            if guess_input.isdigit(): 

                guess = int(guess_input)

                if guess > 100 or guess < 1:

                    print("\nEnter a number within the specified range (1-100).")

                else:

                    break

            else:

                print("\nEnter a valid number between 1 and 100.")
            
            
    # Stops the code once the user runs out of guesses
        if user1.score == 0:
            print(f"You ran out of guesses. The number was {number}.")

            user1.addList()
            
            break
    
        if number > guess:
            print("\nYour guess was too low.")
            user1.score -= 100
            
        elif number < guess:
            print("\nYour guess was too high.")
            user1.score -= 100

# Stops the code once the user guesses correctly
        else:
            print(f"\nYou got it! Your score was {user1.score}.")

            user1.addList()
            
            break

        

# Ask user if they want to run the program again
def again():

    global endGame

    leave = input("\nWould you like to run the program again? Y / N: ").strip().upper()

    if leave.upper() == "N":

        
        endGame = True

    else:

        print("\n Running it back.")


# Reads any existing leaderboard and formats it into the lbInfo list
def loadLeaderboard():

    f = open("SAleaderboard.txt", "r")

    for line in f:

        oldScore = line.strip().split(": ")

        if len(oldScore) == 2:

            name, score = oldScore
            lbInfo.append((name, int(score)))

    f.close()

    order() 



# Function for putting the leaderboard in highest to lowest order
def order():

    # key=lambda allows you to sort based on the value at index 1 of the tuple

    lbInfo.sort(key=lambda x: x[1], reverse=True)

# Function for looking at the leaderboard from the main menu
def viewLeaderboard():

    if len(lbInfo) == 0:

        print("\nThe leaderboard is empty right now. Play a round to put your score here.")

        goBack = input("\nPress any key to return to the main menu.")

    else:

        for name, score in lbInfo:
            print(f"\n{name}: {score}")

        goBack = input("\nPress any key to return to the main menu.")

# Function for writing scores to SAleaderboard.txt
def writeScore():

    f = open("SAleaderboard.txt", "w")

    for name, score in lbInfo:

        f.write(f"\n{name}: {score}")


    f.close()
    

# Main menu function
def title():

    print(" _________________________________________________")
    print("|         Welcome to Guess the Number 2.0         |")
    print("|_________________________________________________|")

    while True:

    # Gets user input and continues on with whichever path they choose
        menuInput = input("\nPress 1 to continue to the game. Press 2 to view the leaderboard.")

        if menuInput.strip() == "1":

            print("\nStarting the game.")
            break
        
        elif menuInput.strip() == "2":

            viewLeaderboard()
            
            continue
        
        else:

            print("\nPlease provide a valid input.")
            continue



# Now we call the functions in order.

loadLeaderboard()

title()



# Loop to keep the game going until the player stops it
while True:

    game()

    order()

    writeScore()

    again()

    if endGame == True:

        print("\nGoodbye!")
        break



    
    
